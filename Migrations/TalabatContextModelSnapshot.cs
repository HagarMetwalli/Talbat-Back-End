// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talbat.Models;

namespace Talbat.Migrations
{
    [DbContext(typeof(TalabatContext))]
    partial class TalabatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Talbat.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("Talbat.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Talbat.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClientDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientFname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ClientGenderIsMale")
                        .HasColumnType("int");

                    b.Property<string>("ClientLname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ClientNewsletterSubscribe")
                        .HasColumnType("int");

                    b.Property<int>("ClientSmsSubscribe")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Talbat.Models.ClientAddress", b =>
                {
                    b.Property<int>("ClientAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClientAddressAddressTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("ClientAddressApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("ClientAddressBuilding")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("ClientAddressFloor")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("ClientAddressLandLine")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ClientAddressMobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ClientAddressOptionalDirections")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientAddressStreet")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ClientAddressTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("ClientAddressId");

                    b.HasIndex(new[] { "CityId" }, "IX_ClientAddress_City_Id");

                    b.HasIndex(new[] { "ClientAddressTypeId" }, "IX_ClientAddress_ClientAddress_Type_Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientAddress_Client_Id");

                    b.HasIndex(new[] { "RegionId" }, "IX_ClientAddress_Region_Id");

                    b.ToTable("ClientAddress");
                });

            modelBuilder.Entity("Talbat.Models.ClientCoupon", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "CouponId");

                    b.HasIndex("CouponId");

                    b.ToTable("ClientCoupon");
                });

            modelBuilder.Entity("Talbat.Models.ClientDeliveryManOrder", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryManId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderShipingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId", "DeliveryManId", "InvoiceId");

                    b.HasIndex(new[] { "ClientAddressId" }, "IX_ClientDeliveryManOrder_ClientAddress_Id");

                    b.HasIndex(new[] { "DeliveryManId" }, "IX_ClientDeliveryManOrder_DeliveryMan_Id");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_ClientDeliveryManOrder_Invoice_Id");

                    b.ToTable("ClientDeliveryManOrder");
                });

            modelBuilder.Entity("Talbat.Models.ClientPromotion", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ClientPromotion");
                });

            modelBuilder.Entity("Talbat.Models.ClientSeekingJob", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "JobId")
                        .HasName("PK_User_Seeking_Jobs");

                    b.HasIndex(new[] { "JobId" }, "IX_Client_Seeking_Jobs_Job_Id");

                    b.ToTable("Client_Seeking_Jobs");
                });

            modelBuilder.Entity("Talbat.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Talbat.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<int>("CouponAvailableUsingTimes")
                        .HasColumnType("int");

                    b.Property<int>("CouponDaysCount")
                        .HasColumnType("int");

                    b.Property<string>("CouponKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CouponMaxMoneyValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CouponStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsForAllStoreItems")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("CouponId");

                    b.HasIndex("StoreId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Talbat.Models.CouponItem", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CouponId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CouponItem");
                });

            modelBuilder.Entity("Talbat.Models.Cuisine", b =>
                {
                    b.Property<int>("CuisineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CuisineName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("TotalOrdersNumber")
                        .HasColumnType("int");

                    b.HasKey("CuisineId");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("Talbat.Models.DeliveryMan", b =>
                {
                    b.Property<int>("DeliveryManId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryManCurrentLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DeliveryManHireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryManName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("DeliveryManSalary")
                        .HasColumnType("int");

                    b.HasKey("DeliveryManId");

                    b.ToTable("DeliveryMan");
                });

            modelBuilder.Entity("Talbat.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Invoice_Order_Id");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Talbat.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasDefaultValueSql("('No Description')");

                    b.Property<string>("ItemImage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("('Default.png')");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ItemPrice")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex(new[] { "CountryId" }, "IX_Item_Country_Id");

                    b.HasIndex(new[] { "StoreId" }, "IX_Item_Store_Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Talbat.Models.ItemCategory", b =>
                {
                    b.Property<int>("ItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ItemCategoryId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Talbat.Models.ItemReview", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderReviewId")
                        .HasColumnType("int");

                    b.Property<int>("RateStatusId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "OrderReviewId");

                    b.HasIndex("OrderReviewId");

                    b.HasIndex(new[] { "RateStatusId" }, "IX_ItemReview_RateStatus_Id");

                    b.ToTable("ItemReview");
                });

            modelBuilder.Entity("Talbat.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("JobLocationId")
                        .HasColumnType("int");

                    b.Property<int>("JobPeriodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JobPostedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex(new[] { "JobCategoryId" }, "IX_Job_JobCategory_Id");

                    b.HasIndex(new[] { "JobLocationId" }, "IX_Job_JobLocation_Id");

                    b.HasIndex(new[] { "JobPeriodId" }, "IX_Job_JobPeriod_Id");

                    b.HasIndex(new[] { "JobTypeId" }, "IX_Job_JobType_Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Talbat.Models.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobCategoryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("JobCategoryId");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("Talbat.Models.JobLocation", b =>
                {
                    b.Property<int>("JobLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobLocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("JobLocationId");

                    b.ToTable("JobLocation");
                });

            modelBuilder.Entity("Talbat.Models.JobPeriod", b =>
                {
                    b.Property<int>("JobPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobPeriodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("JobPeriodId");

                    b.ToTable("JobPeriod");
                });

            modelBuilder.Entity("Talbat.Models.JobType", b =>
                {
                    b.Property<int>("JobTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("JobTypeId");

                    b.ToTable("JobType");
                });

            modelBuilder.Entity("Talbat.Models.Login", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Email");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Talbat.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<double>("OrderCost")
                        .HasColumnType("float");

                    b.Property<string>("OrderSpecialRequest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("('none')");

                    b.Property<DateTime>("OrderTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "ClientId" }, "IX_Order_Client_Id");

                    b.HasIndex(new[] { "StoreId" }, "IX_Order_Store_Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Talbat.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("OrderItemSpecialRequest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("('none')");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex(new[] { "ItemId" }, "IX_OrderItem_Item_Id");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Talbat.Models.OrderReview", b =>
                {
                    b.Property<int>("OrderReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryTime")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderPackaging")
                        .HasColumnType("int");

                    b.Property<string>("OrderReviewComment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("QualityOfFood")
                        .HasColumnType("int");

                    b.Property<int>("ValueForMoney")
                        .HasColumnType("int");

                    b.HasKey("OrderReviewId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId");

                    b.HasIndex(new[] { "DeliveryTime" }, "IX_OrderReview_DeliveryTime");

                    b.HasIndex(new[] { "OrderPackaging" }, "IX_OrderReview_OrderPackaging");

                    b.HasIndex(new[] { "QualityOfFood" }, "IX_OrderReview_QualityOFFood");

                    b.HasIndex(new[] { "ValueForMoney" }, "IX_OrderReview_ValueForMoney");

                    b.ToTable("OrderReview");
                });

            modelBuilder.Entity("Talbat.Models.Partner", b =>
                {
                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnerFname")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PartnerLname")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PartnerPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartnerPhoneNo")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("PartnerId");

                    b.HasIndex(new[] { "StoreId" }, "IX_Partner_Store_Id");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("Talbat.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PromotionDaysNumber")
                        .HasColumnType("int");

                    b.Property<string>("PromotionDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PromotionImage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("('Default.png')");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PromotionQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PromotionSaleValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("PromotionStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PromotionTypePercentage")
                        .HasColumnType("int");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("Talbat.Models.PromotionItem", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionItemQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PromotionId", "ItemId")
                        .HasName("PK_OfferItem");

                    b.HasIndex(new[] { "ItemId" }, "IX_OfferItem_Item_Id");

                    b.ToTable("PromotionItem");
                });

            modelBuilder.Entity("Talbat.Models.PromotionReview", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderReviewId")
                        .HasColumnType("int");

                    b.Property<int>("RateStatusId")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "OrderReviewId", "RateStatusId")
                        .HasName("PK_OfferReview_1");

                    b.HasIndex("OrderReviewId");

                    b.HasIndex(new[] { "RateStatusId" }, "IX_OfferReview_RateStatus_Id");

                    b.ToTable("PromotionReview");
                });

            modelBuilder.Entity("Talbat.Models.RateStatus", b =>
                {
                    b.Property<int>("RateStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RateStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RateStatusId");

                    b.ToTable("RateStatus");
                });

            modelBuilder.Entity("Talbat.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Talbat.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("StoreDeliveryDistance")
                        .HasColumnType("float");

                    b.Property<double>("StoreDeliveryFee")
                        .HasColumnType("float");

                    b.Property<int>("StoreDeliveryTime")
                        .HasColumnType("int");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<double>("StoreLatitude")
                        .HasColumnType("float");

                    b.Property<double>("StoreLongitude")
                        .HasColumnType("float");

                    b.Property<double>("StoreMinOrder")
                        .HasColumnType("float");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StoreOrdersNumber")
                        .HasColumnType("int");

                    b.Property<int>("StorePaymentOnDeliverCash")
                        .HasColumnType("int");

                    b.Property<int>("StorePaymentVisa")
                        .HasColumnType("int");

                    b.Property<string>("StorePreOrder")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("StoreTypeId")
                        .HasColumnType("int");

                    b.HasKey("StoreId");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "CuisineId" }, "IX_Store_CuisineId");

                    b.HasIndex(new[] { "StoreTypeId" }, "IX_Store_StoreType_Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Talbat.Models.StoreType", b =>
                {
                    b.Property<int>("StoreTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StoreTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StoreTypeId");

                    b.ToTable("StoreType");
                });

            modelBuilder.Entity("Talbat.Models.StoreWorkingHour", b =>
                {
                    b.Property<int>("StoreWorkingHourId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreWorkingHourDay")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("StoreWorkingHourEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("StoreWorkingHourStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("StoreWorkingHourId");

                    b.HasIndex(new[] { "StoreId" }, "IX_StoreWorkingHour_Store_Id");

                    b.ToTable("StoreWorkingHour");
                });

            modelBuilder.Entity("Talbat.Models.SubItem", b =>
                {
                    b.Property<int>("SubItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SubItemCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SubItemIsRadioButton")
                        .HasColumnType("int")
                        .IsFixedLength(true);

                    b.Property<string>("SubItemName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("SubItemPrice")
                        .HasColumnType("float");

                    b.HasKey("SubItemId");

                    b.HasIndex(new[] { "ItemId" }, "IX_SubItem_Item_Id");

                    b.HasIndex(new[] { "SubItemCategoryId" }, "IX_SubItem_SubItemCategory_Id");

                    b.ToTable("SubItem");
                });

            modelBuilder.Entity("Talbat.Models.SubItemCategory", b =>
                {
                    b.Property<int>("SubItemCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubItemCategoryDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("SubItemCategoryId");

                    b.ToTable("SubItemCategory");
                });

            modelBuilder.Entity("Talbat.Models.TempPartnerRegisterationDetail", b =>
                {
                    b.Property<int>("TempPartnerStoreId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerContactRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PartnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnerFname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PartnerLname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PartnerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreAddress")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("StoreBranchesNo")
                        .HasColumnType("int");

                    b.Property<int>("StoreCountryId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StoreTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StoreWebSite")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TempPartnerStoreId");

                    b.HasIndex("StoreCountryId");

                    b.HasIndex(new[] { "StoreTypeId" }, "IX_TempPartnerRegisterationDetails_Store_Type_Id");

                    b.ToTable("TempPartnerRegisterationDetails");
                });

            modelBuilder.Entity("Talbat.Models.ClientAddress", b =>
                {
                    b.HasOne("Talbat.Models.City", "City")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_ClientAddress_City")
                        .IsRequired();

                    b.HasOne("Talbat.Models.AddressType", "ClientAddressType")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientAddressTypeId")
                        .HasConstraintName("FK_ClientAddress_AddressType")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientAddress_Client")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Region", "Region")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_ClientAddress_Region")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Client");

                    b.Navigation("ClientAddressType");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Talbat.Models.ClientCoupon", b =>
                {
                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientCoupons")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientCoupon_Client")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Coupon", "Coupon")
                        .WithMany("ClientCoupons")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_ClientCoupon_Coupon")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("Talbat.Models.ClientDeliveryManOrder", b =>
                {
                    b.HasOne("Talbat.Models.ClientAddress", "ClientAddress")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("ClientAddressId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_ClientAddress")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_Client")
                        .IsRequired();

                    b.HasOne("Talbat.Models.DeliveryMan", "DeliveryMan")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("DeliveryManId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_DeliveryMan")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Invoice", "Invoice")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_Order")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientAddress");

                    b.Navigation("DeliveryMan");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Talbat.Models.ClientPromotion", b =>
                {
                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientPromotions")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientPromotion_Client")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Promotion", "Promotion")
                        .WithMany("ClientPromotions")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_ClientPromotion_Promotion")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Talbat.Models.ClientSeekingJob", b =>
                {
                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientSeekingJobs")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_User_Seeking_Jobs_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.Job", "Job")
                        .WithMany("ClientSeekingJobs")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_Client_Seeking_Jobs_Job")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Talbat.Models.Coupon", b =>
                {
                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Coupons")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Coupon_Store")
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.CouponItem", b =>
                {
                    b.HasOne("Talbat.Models.Coupon", "Coupon")
                        .WithMany("CouponItems")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_CouponItem_Coupon")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("CouponItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_CouponItem_Item")
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Talbat.Models.Invoice", b =>
                {
                    b.HasOne("Talbat.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Invoice_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Talbat.Models.Item", b =>
                {
                    b.HasOne("Talbat.Models.Country", "Country")
                        .WithMany("Items")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Item_Country")
                        .IsRequired();

                    b.HasOne("Talbat.Models.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Items")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Item_Store")
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("ItemCategory");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.ItemReview", b =>
                {
                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("ItemReviews")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemReview_Item")
                        .IsRequired();

                    b.HasOne("Talbat.Models.OrderReview", "OrderReview")
                        .WithMany("ItemReviews")
                        .HasForeignKey("OrderReviewId")
                        .HasConstraintName("FK_ItemReview_OrderReview")
                        .IsRequired();

                    b.HasOne("Talbat.Models.RateStatus", "RateStatus")
                        .WithMany("ItemReviews")
                        .HasForeignKey("RateStatusId")
                        .HasConstraintName("FK_ItemReview_RateStatus")
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("OrderReview");

                    b.Navigation("RateStatus");
                });

            modelBuilder.Entity("Talbat.Models.Job", b =>
                {
                    b.HasOne("Talbat.Models.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .HasConstraintName("FK_Job_JobCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.JobLocation", "JobLocation")
                        .WithMany("Jobs")
                        .HasForeignKey("JobLocationId")
                        .HasConstraintName("FK_Job_JobLocation")
                        .IsRequired();

                    b.HasOne("Talbat.Models.JobPeriod", "JobPeriod")
                        .WithMany("Jobs")
                        .HasForeignKey("JobPeriodId")
                        .HasConstraintName("FK_Job_JobPeriod")
                        .IsRequired();

                    b.HasOne("Talbat.Models.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_Job_JobType")
                        .IsRequired();

                    b.Navigation("JobCategory");

                    b.Navigation("JobLocation");

                    b.Navigation("JobPeriod");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Talbat.Models.Order", b =>
                {
                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Order_User")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Order_Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.OrderItem", b =>
                {
                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OrderItem_Item")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Talbat.Models.OrderReview", b =>
                {
                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("OrderReviews")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_OrderReview_Client")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Order", "Order")
                        .WithMany("OrderReviews")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderReview_Order")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Talbat.Models.Partner", b =>
                {
                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Partners")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Partner_Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.PromotionItem", b =>
                {
                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("PromotionItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OfferItem_Item")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.Promotion", "Promotion")
                        .WithMany("PromotionItems")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_OfferItem_Offer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Talbat.Models.PromotionReview", b =>
                {
                    b.HasOne("Talbat.Models.OrderReview", "OrderReview")
                        .WithMany("PromotionReviews")
                        .HasForeignKey("OrderReviewId")
                        .HasConstraintName("FK_OfferReview_OrderReview")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Promotion", "Promotion")
                        .WithMany("PromotionReviews")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_OfferReview_Promotion")
                        .IsRequired();

                    b.HasOne("Talbat.Models.RateStatus", "RateStatus")
                        .WithMany("PromotionReviews")
                        .HasForeignKey("RateStatusId")
                        .HasConstraintName("FK_OfferReview_RateStatus")
                        .IsRequired();

                    b.Navigation("OrderReview");

                    b.Navigation("Promotion");

                    b.Navigation("RateStatus");
                });

            modelBuilder.Entity("Talbat.Models.Store", b =>
                {
                    b.HasOne("Talbat.Models.Country", "Country")
                        .WithMany("Stores")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.Cuisine", "Cuisine")
                        .WithMany("Stores")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.StoreType", "StoreType")
                        .WithMany("Stores")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_Store_StoreType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Cuisine");

                    b.Navigation("StoreType");
                });

            modelBuilder.Entity("Talbat.Models.StoreWorkingHour", b =>
                {
                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("StoreWorkingHours")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreWorkingHour_Store")
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.SubItem", b =>
                {
                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("SubItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_SubItem_Item1")
                        .IsRequired();

                    b.HasOne("Talbat.Models.SubItemCategory", "SubItemCategory")
                        .WithMany("SubItems")
                        .HasForeignKey("SubItemCategoryId")
                        .HasConstraintName("FK_SubItem_SubItemCategory")
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SubItemCategory");
                });

            modelBuilder.Entity("Talbat.Models.TempPartnerRegisterationDetail", b =>
                {
                    b.HasOne("Talbat.Models.Country", "Country")
                        .WithMany("TempPartnerRegisterationDetails")
                        .HasForeignKey("StoreCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.StoreType", "StoreType")
                        .WithMany("TempPartnerRegisterationDetails")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_TempPartnerRegisterationDetails_StoreType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("StoreType");
                });

            modelBuilder.Entity("Talbat.Models.AddressType", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("Talbat.Models.City", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("Talbat.Models.Client", b =>
                {
                    b.Navigation("ClientAddresses");

                    b.Navigation("ClientCoupons");

                    b.Navigation("ClientDeliveryManOrders");

                    b.Navigation("ClientPromotions");

                    b.Navigation("ClientSeekingJobs");

                    b.Navigation("OrderReviews");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Talbat.Models.ClientAddress", b =>
                {
                    b.Navigation("ClientDeliveryManOrders");
                });

            modelBuilder.Entity("Talbat.Models.Country", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Stores");

                    b.Navigation("TempPartnerRegisterationDetails");
                });

            modelBuilder.Entity("Talbat.Models.Coupon", b =>
                {
                    b.Navigation("ClientCoupons");

                    b.Navigation("CouponItems");
                });

            modelBuilder.Entity("Talbat.Models.Cuisine", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Talbat.Models.DeliveryMan", b =>
                {
                    b.Navigation("ClientDeliveryManOrders");
                });

            modelBuilder.Entity("Talbat.Models.Invoice", b =>
                {
                    b.Navigation("ClientDeliveryManOrders");
                });

            modelBuilder.Entity("Talbat.Models.Item", b =>
                {
                    b.Navigation("CouponItems");

                    b.Navigation("ItemReviews");

                    b.Navigation("OrderItems");

                    b.Navigation("PromotionItems");

                    b.Navigation("SubItems");
                });

            modelBuilder.Entity("Talbat.Models.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Talbat.Models.Job", b =>
                {
                    b.Navigation("ClientSeekingJobs");
                });

            modelBuilder.Entity("Talbat.Models.JobCategory", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.JobLocation", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.JobPeriod", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderReviews");
                });

            modelBuilder.Entity("Talbat.Models.OrderReview", b =>
                {
                    b.Navigation("ItemReviews");

                    b.Navigation("PromotionReviews");
                });

            modelBuilder.Entity("Talbat.Models.Promotion", b =>
                {
                    b.Navigation("ClientPromotions");

                    b.Navigation("PromotionItems");

                    b.Navigation("PromotionReviews");
                });

            modelBuilder.Entity("Talbat.Models.RateStatus", b =>
                {
                    b.Navigation("ItemReviews");

                    b.Navigation("PromotionReviews");
                });

            modelBuilder.Entity("Talbat.Models.Region", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("Talbat.Models.Store", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("Items");

                    b.Navigation("Orders");

                    b.Navigation("Partners");

                    b.Navigation("StoreWorkingHours");
                });

            modelBuilder.Entity("Talbat.Models.StoreType", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("TempPartnerRegisterationDetails");
                });

            modelBuilder.Entity("Talbat.Models.SubItemCategory", b =>
                {
                    b.Navigation("SubItems");
                });
#pragma warning restore 612, 618
        }
    }
}
