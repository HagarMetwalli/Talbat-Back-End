// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talbat.Models;

namespace Talbat.Migrations
{
    [DbContext(typeof(TalabatContext))]
    [Migration("20210530211950_city-client-addresstype-clientdelivermanorder-country-cuisine")]
    partial class cityclientaddresstypeclientdelivermanordercountrycuisine
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Talbat.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressType_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AddressType_Name");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("Talbat.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("City_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("City_Name");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Talbat.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Client_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClientDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("Client_DateOfBirth");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Client_Email");

                    b.Property<string>("ClientFname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Client_Fname");

                    b.Property<int>("ClientGenderIsMale")
                        .HasColumnType("int")
                        .HasColumnName("Client_Gender_IsMale");

                    b.Property<string>("ClientLname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Client_Lname");

                    b.Property<int>("ClientNewsletterSubscribe")
                        .HasColumnType("int")
                        .HasColumnName("Client_NewsletterSubscribe");

                    b.Property<string>("ClientPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Client_Password");

                    b.Property<int>("ClientSmsSubscribe")
                        .HasColumnType("int")
                        .HasColumnName("Client_SmsSubscribe");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Talbat.Models.ClientAddress", b =>
                {
                    b.Property<int>("ClientAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAddress_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("City_Id");

                    b.Property<string>("ClientAddressAddressTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientAddress_AddressTitle")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("ClientAddressApartmentNumber")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("ClientAddress_ApartmentNumber");

                    b.Property<string>("ClientAddressBuilding")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientAddress_Building");

                    b.Property<string>("ClientAddressFloor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientAddress_Floor");

                    b.Property<string>("ClientAddressLandLine")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientAddress_LandLine")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ClientAddressMobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientAddress_MobileNumber");

                    b.Property<string>("ClientAddressOptionalDirections")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ClientAddress_OptionalDirections");

                    b.Property<string>("ClientAddressStreet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientAddress_Street");

                    b.Property<int>("ClientAddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientAddress_Type_Id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Id");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.HasKey("ClientAddressId");

                    b.HasIndex("ClientAddressTypeId");

                    b.HasIndex(new[] { "CityId" }, "IX_ClientAddress_City_Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientAddress_Client_Id");

                    b.HasIndex(new[] { "RegionId" }, "IX_ClientAddress_Region_Id");

                    b.ToTable("ClientAddress");
                });

            modelBuilder.Entity("Talbat.Models.ClientDeliveryManOrder", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Id");

                    b.Property<int>("DeliveryManId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMan_Id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Id");

                    b.Property<int>("ClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ClientAddress_Id");

                    b.Property<DateTime?>("OrderShipingTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Order_Shiping_Time");

                    b.HasKey("ClientId", "DeliveryManId", "InvoiceId");

                    b.HasIndex(new[] { "ClientAddressId" }, "IX_ClientDeliveryManOrder_ClientAddress_Id");

                    b.HasIndex(new[] { "DeliveryManId" }, "IX_ClientDeliveryManOrder_DeliveryMan_Id");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_ClientDeliveryManOrder_Invoice_Id");

                    b.ToTable("ClientDeliveryManOrder");
                });

            modelBuilder.Entity("Talbat.Models.ClientOffer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasColumnName("Offer_Id");

                    b.HasKey("UserId", "OfferId")
                        .HasName("PK_User_Offer");

                    b.HasIndex(new[] { "OfferId" }, "IX_Client_Offer_Offer_Id");

                    b.ToTable("Client_Offer");
                });

            modelBuilder.Entity("Talbat.Models.ClientSeekingJob", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Id");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("Job_Id");

                    b.HasKey("ClientId", "JobId")
                        .HasName("PK_User_Seeking_Jobs");

                    b.HasIndex(new[] { "JobId" }, "IX_Client_Seeking_Jobs_Job_Id");

                    b.ToTable("Client_Seeking_Jobs");
                });

            modelBuilder.Entity("Talbat.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Country_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Country_Name");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Currency_Name");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Talbat.Models.Cuisine", b =>
                {
                    b.Property<int>("CuisineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CuisineName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalOrdersNumber")
                        .HasColumnType("int");

                    b.HasKey("CuisineId");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("Talbat.Models.DeliveryMan", b =>
                {
                    b.Property<int>("DeliveryManId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMan_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryManCurrentLocation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DeliveryMan_CurrentLocation");

                    b.Property<DateTime?>("DeliveryManHireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DeliveryMan_HireDate");

                    b.Property<string>("DeliveryManName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DeliveryMan_Name");

                    b.Property<int?>("DeliveryManSalary")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMan_Salary");

                    b.HasKey("DeliveryManId");

                    b.ToTable("DeliveryMan");
                });

            modelBuilder.Entity("Talbat.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDetails")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Invoice_Order_Id");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Talbat.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Item_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategory_Id");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Item_Description")
                        .HasDefaultValueSql("('No Description')");

                    b.Property<string>("ItemImage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Item_Image")
                        .HasDefaultValueSql("('Default.png')");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Item_Name");

                    b.Property<string>("ItemPrice")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Item_Price");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.HasKey("ItemId");

                    b.HasIndex(new[] { "CountryId" }, "IX_Item_Country_Id");

                    b.HasIndex(new[] { "StoreId" }, "IX_Item_Store_Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Talbat.Models.ItemCategory", b =>
                {
                    b.Property<int>("ItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemCategory_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ItemCategory_Name");

                    b.HasKey("ItemCategoryId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Talbat.Models.ItemReview", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("Item_Id");

                    b.Property<int>("OrderReviewId")
                        .HasColumnType("int")
                        .HasColumnName("OrderReview_Id");

                    b.Property<int>("RateStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RateStatus_Id");

                    b.HasKey("ItemId");

                    b.HasIndex("RateStatusId");

                    b.ToTable("ItemReview");
                });

            modelBuilder.Entity("Talbat.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Job_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("JobCategory_Id");

                    b.Property<string>("JobDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Job_Description");

                    b.Property<int>("JobLocationId")
                        .HasColumnType("int")
                        .HasColumnName("JobLocation_Id");

                    b.Property<int>("JobPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("JobPeriod_Id");

                    b.Property<DateTime?>("JobPostedTime")
                        .HasColumnType("date")
                        .HasColumnName("Job_PostedTime");

                    b.Property<string>("JobTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Job_Title");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int")
                        .HasColumnName("JobType_Id");

                    b.HasKey("JobId");

                    b.HasIndex(new[] { "JobCategoryId" }, "IX_Job_JobCategory_Id");

                    b.HasIndex(new[] { "JobLocationId" }, "IX_Job_JobLocation_Id");

                    b.HasIndex(new[] { "JobPeriodId" }, "IX_Job_JobPeriod_Id");

                    b.HasIndex(new[] { "JobTypeId" }, "IX_Job_JobType_Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Talbat.Models.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobCategory_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobCategoryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JobCategory_Type");

                    b.HasKey("JobCategoryId");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("Talbat.Models.JobLocation", b =>
                {
                    b.Property<int>("JobLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobLocation_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobLocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JobLocation_Name");

                    b.HasKey("JobLocationId");

                    b.ToTable("JobLocation");
                });

            modelBuilder.Entity("Talbat.Models.JobPeriod", b =>
                {
                    b.Property<int>("JobPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobPeriod_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobPeriodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JobPeriod_Name");

                    b.HasKey("JobPeriodId");

                    b.ToTable("JobPeriod");
                });

            modelBuilder.Entity("Talbat.Models.JobType", b =>
                {
                    b.Property<int>("JobTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobType_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JobType_Name");

                    b.HasKey("JobTypeId");

                    b.ToTable("JobType");
                });

            modelBuilder.Entity("Talbat.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Offer_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfferDaysNumber")
                        .HasColumnType("int")
                        .HasColumnName("Offer_DaysNumber");

                    b.Property<string>("OfferDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Offer_Description");

                    b.Property<string>("OfferImage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Offer_Image")
                        .HasDefaultValueSql("('Default.png')");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Offer_Name");

                    b.Property<string>("OfferPrice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Offer_Price");

                    b.Property<int>("OfferQuantity")
                        .HasColumnType("int")
                        .HasColumnName("Offer_Quantity");

                    b.Property<DateTime>("OfferStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("Offer_StartDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OfferTypeIsCoupon")
                        .HasColumnType("int")
                        .HasColumnName("OfferType_IsCoupon");

                    b.HasKey("OfferId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("Talbat.Models.OfferItem", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasColumnName("Offer_Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("Item_Id");

                    b.Property<int>("OfferItemQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfferItem_Quantity")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("OfferItemSaleValue")
                        .HasColumnType("int")
                        .HasColumnName("OfferItem_SaleValue");

                    b.Property<int>("OfferItemTypePercentage")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("OfferItem_TypePercentage")
                        .IsFixedLength(true);

                    b.HasKey("OfferId", "ItemId");

                    b.HasIndex(new[] { "ItemId" }, "IX_OfferItem_Item_Id");

                    b.ToTable("OfferItem");
                });

            modelBuilder.Entity("Talbat.Models.OfferReview", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasColumnName("Offer_Id");

                    b.Property<int>("OrderReviewId")
                        .HasColumnType("int")
                        .HasColumnName("OrderReview_Id");

                    b.Property<int>("RateStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RateStatus_Id");

                    b.HasKey("OfferId");

                    b.HasIndex("RateStatusId");

                    b.ToTable("OfferReview");
                });

            modelBuilder.Entity("Talbat.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Id");

                    b.Property<double>("OrderCost")
                        .HasColumnType("float")
                        .HasColumnName("Order_Cost");

                    b.Property<string>("OrderSpecialRequest")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Order_SpecialRequest")
                        .HasDefaultValueSql("('none')");

                    b.Property<DateTime?>("OrderTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Order_Time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "ClientId" }, "IX_Order_Client_Id");

                    b.HasIndex(new[] { "StoreId" }, "IX_Order_Store_Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Talbat.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("Item_Id");

                    b.Property<int>("OrderItemQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItem_Qty")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("OrderItemSpecialRequest")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("OrderItem_SpecialRequest")
                        .HasDefaultValueSql("('none')");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex(new[] { "ItemId" }, "IX_OrderItem_Item_Id");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Talbat.Models.OrderReview", b =>
                {
                    b.Property<int>("OrderReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderReview_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryTime")
                        .HasColumnType("int");

                    b.Property<string>("OfferReviewBody")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("OfferReview_body");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<int>("OrderPackaging")
                        .HasColumnType("int");

                    b.Property<int>("QualityOffood")
                        .HasColumnType("int")
                        .HasColumnName("QualityOFFood");

                    b.Property<int>("ValueForMoney")
                        .HasColumnType("int");

                    b.HasKey("OrderReviewId");

                    b.HasIndex("DeliveryTime");

                    b.HasIndex("OrderPackaging");

                    b.HasIndex("QualityOffood");

                    b.HasIndex("ValueForMoney");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderReview_Order_Id");

                    b.ToTable("OrderReview");
                });

            modelBuilder.Entity("Talbat.Models.Partner", b =>
                {
                    b.Property<int>("PartnerId")
                        .HasColumnType("int")
                        .HasColumnName("Partner_Id");

                    b.Property<string>("PartnerEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_Email");

                    b.Property<string>("PartnerFname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_FName");

                    b.Property<string>("PartnerLname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_LName");

                    b.Property<string>("PartnerPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_Password");

                    b.Property<int?>("PartnerPhoneNo")
                        .HasColumnType("int")
                        .HasColumnName("Partner_PhoneNo");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.HasKey("PartnerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("Talbat.Models.RateStatus", b =>
                {
                    b.Property<int>("RateStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RateStatus_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RateStatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RateStatus_Name");

                    b.HasKey("RateStatusId");

                    b.ToTable("RateStatus");
                });

            modelBuilder.Entity("Talbat.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Region_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Region_Name");

                    b.HasKey("RegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Talbat.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Review_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ReviewCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewCategory_Id");

                    b.Property<string>("ReviewContent")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Review_Content");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Review_Date");

                    b.Property<double?>("ReviewRates")
                        .HasColumnType("float")
                        .HasColumnName("Review_Rates");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("ReviewId");

                    b.HasIndex(new[] { "ReviewCategoryId" }, "IX_Review_ReviewCategory_Id");

                    b.HasIndex(new[] { "StoreId" }, "IX_Review_Store_Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Review_User_Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Talbat.Models.ReviewCategory", b =>
                {
                    b.Property<int>("ReviewCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewCategory_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReviewCategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ReviewCategory_Name");

                    b.HasKey("ReviewCategoryId");

                    b.ToTable("ReviewCategory");
                });

            modelBuilder.Entity("Talbat.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Store_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<int?>("CuisineId")
                        .HasColumnType("int");

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Store_Address");

                    b.Property<string>("StoreCuisine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Store_Cuisine");

                    b.Property<double?>("StoreDeliveryFee")
                        .HasColumnType("float")
                        .HasColumnName("Store_DeliveryFee");

                    b.Property<int>("StoreDeliveryTime")
                        .HasColumnType("int")
                        .HasColumnName("Store_DeliveryTime");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Store_Description");

                    b.Property<double?>("StoreMinOrder")
                        .HasColumnType("float")
                        .HasColumnName("Store_MinOrder");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Store_Name");

                    b.Property<int>("StoreOrdersNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StorePaymentOnDeliverCash")
                        .HasColumnType("int")
                        .HasColumnName("Store_PaymentOnDeliverCash");

                    b.Property<int?>("StorePaymentVisa")
                        .HasColumnType("int")
                        .HasColumnName("Store_PaymentVisa");

                    b.Property<string>("StorePreOrder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Store_PreOrder");

                    b.Property<int?>("StoreTypeId")
                        .HasColumnType("int")
                        .HasColumnName("StoreType_Id");

                    b.HasKey("StoreId");

                    b.HasIndex("CuisineId");

                    b.HasIndex("StoreTypeId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Talbat.Models.StoreType", b =>
                {
                    b.Property<int>("StoreTypeId")
                        .HasColumnType("int")
                        .HasColumnName("StoreType_Id");

                    b.Property<string>("StoreType1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Store_Type");

                    b.HasKey("StoreTypeId");

                    b.ToTable("StoreType");
                });

            modelBuilder.Entity("Talbat.Models.StoreWorkingHour", b =>
                {
                    b.Property<int>("StoreWorkingHourId")
                        .HasColumnType("int")
                        .HasColumnName("StoreWorkingHour_Id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.Property<string>("StoreWorkingHourDay")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("StoreWorkingHour_Day");

                    b.Property<int?>("StoreWorkingHourEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StoreWorkingHour_End")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StoreWorkingHourStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StoreWorkingHour_Start")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("StoreWorkingHourId");

                    b.HasIndex(new[] { "StoreId" }, "IX_StoreWorkingHour_Store_Id");

                    b.ToTable("StoreWorkingHour");
                });

            modelBuilder.Entity("Talbat.Models.SubItem", b =>
                {
                    b.Property<int>("SubItemId")
                        .HasColumnType("int")
                        .HasColumnName("SubItem_Id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("Item_Id");

                    b.Property<int>("SubItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubItemCategory_Id");

                    b.Property<string>("SubItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SubItem_Name");

                    b.Property<double>("SubItemPrice")
                        .HasColumnType("float")
                        .HasColumnName("SubItem_Price");

                    b.Property<byte[]>("SubItemSelectionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("binary(10)")
                        .HasColumnName("SubItem_SelectionType")
                        .IsFixedLength(true);

                    b.HasKey("SubItemId");

                    b.HasIndex(new[] { "ItemId" }, "IX_SubItem_Item_Id");

                    b.HasIndex(new[] { "SubItemCategoryId" }, "IX_SubItem_SubItemCategory_Id");

                    b.ToTable("SubItem");
                });

            modelBuilder.Entity("Talbat.Models.SubItemCategory", b =>
                {
                    b.Property<int>("SubItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubItemCategory_Id");

                    b.Property<string>("SubItemCategoryDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SubItemCategory_Description");

                    b.Property<string>("SubItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SubItemCategory_Name");

                    b.HasKey("SubItemCategoryId");

                    b.ToTable("SubItemCategory");
                });

            modelBuilder.Entity("Talbat.Models.TempPartnerRegisterationDetail", b =>
                {
                    b.Property<int>("TempPartnerStoreId")
                        .HasColumnType("int")
                        .HasColumnName("TempPartnerStore_Id");

                    b.Property<string>("PartnerContactRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_ContactRole");

                    b.Property<string>("PartnerEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_Email");

                    b.Property<string>("PartnerFname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_FName");

                    b.Property<string>("PartnerLname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_LName");

                    b.Property<string>("PartnerPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Partner_PhoneNumber");

                    b.Property<int?>("StoreAddress")
                        .HasColumnType("int")
                        .HasColumnName("Store_Address");

                    b.Property<int?>("StoreBranchesNo")
                        .HasColumnType("int")
                        .HasColumnName("Store_BranchesNo");

                    b.Property<string>("StoreContact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Store_Contact");

                    b.Property<string>("StoreCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Store_Country");

                    b.Property<string>("StoreName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Store_Name");

                    b.Property<byte[]>("StoreStatus")
                        .HasMaxLength(10)
                        .HasColumnType("binary(10)")
                        .HasColumnName("Store_Status")
                        .IsFixedLength(true);

                    b.Property<int?>("StoreTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Type_Id");

                    b.HasKey("TempPartnerStoreId");

                    b.HasIndex("StoreTypeId");

                    b.ToTable("TempPartnerRegisterationDetails");
                });

            modelBuilder.Entity("Talbat.Models.ClientAddress", b =>
                {
                    b.HasOne("Talbat.Models.City", "City")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_ClientAddress_City")
                        .IsRequired();

                    b.HasOne("Talbat.Models.AddressType", "ClientAddressType")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientAddressTypeId")
                        .HasConstraintName("FK_ClientAddress_AddressType")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientAddress_Client")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Region", "Region")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_ClientAddress_Region")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Client");

                    b.Navigation("ClientAddressType");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Talbat.Models.ClientDeliveryManOrder", b =>
                {
                    b.HasOne("Talbat.Models.ClientAddress", "ClientAddress")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("ClientAddressId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_ClientAddress")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_Client")
                        .IsRequired();

                    b.HasOne("Talbat.Models.DeliveryMan", "DeliveryMan")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("DeliveryManId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_DeliveryMan")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Invoice", "Invoice")
                        .WithMany("ClientDeliveryManOrders")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_ClientDeliveryManOrder_Order")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientAddress");

                    b.Navigation("DeliveryMan");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Talbat.Models.ClientOffer", b =>
                {
                    b.HasOne("Talbat.Models.Offer", "Offer")
                        .WithMany("ClientOffers")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("FK_User_Offer_Offer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.Client", "User")
                        .WithMany("ClientOffers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_Offer_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Talbat.Models.ClientSeekingJob", b =>
                {
                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("ClientSeekingJobs")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_User_Seeking_Jobs_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.Job", "Job")
                        .WithMany("ClientSeekingJobs")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_Client_Seeking_Jobs_Job")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Talbat.Models.Invoice", b =>
                {
                    b.HasOne("Talbat.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Invoice_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Talbat.Models.Item", b =>
                {
                    b.HasOne("Talbat.Models.Country", "Country")
                        .WithMany("Items")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Item_Country")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Items")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Item_Store")
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.ItemReview", b =>
                {
                    b.HasOne("Talbat.Models.RateStatus", "RateStatus")
                        .WithMany("ItemReviews")
                        .HasForeignKey("RateStatusId")
                        .HasConstraintName("FK_ItemReview_RateStatus")
                        .IsRequired();

                    b.Navigation("RateStatus");
                });

            modelBuilder.Entity("Talbat.Models.Job", b =>
                {
                    b.HasOne("Talbat.Models.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .HasConstraintName("FK_Job_JobCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.JobLocation", "JobLocation")
                        .WithMany("Jobs")
                        .HasForeignKey("JobLocationId")
                        .HasConstraintName("FK_Job_JobLocation")
                        .IsRequired();

                    b.HasOne("Talbat.Models.JobPeriod", "JobPeriod")
                        .WithMany("Jobs")
                        .HasForeignKey("JobPeriodId")
                        .HasConstraintName("FK_Job_JobPeriod")
                        .IsRequired();

                    b.HasOne("Talbat.Models.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_Job_JobType")
                        .IsRequired();

                    b.Navigation("JobCategory");

                    b.Navigation("JobLocation");

                    b.Navigation("JobPeriod");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Talbat.Models.OfferItem", b =>
                {
                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("OfferItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OfferItem_Item")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talbat.Models.Offer", "Offer")
                        .WithMany("OfferItems")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("FK_OfferItem_Offer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Talbat.Models.OfferReview", b =>
                {
                    b.HasOne("Talbat.Models.RateStatus", "RateStatus")
                        .WithMany("OfferReviews")
                        .HasForeignKey("RateStatusId")
                        .HasConstraintName("FK_OfferReview_RateStatus")
                        .IsRequired();

                    b.Navigation("RateStatus");
                });

            modelBuilder.Entity("Talbat.Models.Order", b =>
                {
                    b.HasOne("Talbat.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Order_User")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Order_Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.OrderItem", b =>
                {
                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OrderItem_Item")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Talbat.Models.OrderReview", b =>
                {
                    b.HasOne("Talbat.Models.OrderReview", "DeliveryTimeNavigation")
                        .WithMany("InverseDeliveryTimeNavigation")
                        .HasForeignKey("DeliveryTime")
                        .HasConstraintName("FK_OrderReview_OrderReview2")
                        .IsRequired();

                    b.HasOne("Talbat.Models.Order", "Order")
                        .WithMany("OrderReviews")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderReview_Order")
                        .IsRequired();

                    b.HasOne("Talbat.Models.OrderReview", "OrderPackagingNavigation")
                        .WithMany("InverseOrderPackagingNavigation")
                        .HasForeignKey("OrderPackaging")
                        .HasConstraintName("FK_OrderReview_OrderReview")
                        .IsRequired();

                    b.HasOne("Talbat.Models.OrderReview", "QualityOffoodNavigation")
                        .WithMany("InverseQualityOffoodNavigation")
                        .HasForeignKey("QualityOffood")
                        .HasConstraintName("FK_OrderReview_OrderReview3")
                        .IsRequired();

                    b.HasOne("Talbat.Models.OrderReview", "ValueForMoneyNavigation")
                        .WithMany("InverseValueForMoneyNavigation")
                        .HasForeignKey("ValueForMoney")
                        .HasConstraintName("FK_OrderReview_OrderReview1")
                        .IsRequired();

                    b.Navigation("DeliveryTimeNavigation");

                    b.Navigation("Order");

                    b.Navigation("OrderPackagingNavigation");

                    b.Navigation("QualityOffoodNavigation");

                    b.Navigation("ValueForMoneyNavigation");
                });

            modelBuilder.Entity("Talbat.Models.Partner", b =>
                {
                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Partners")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Partner_Store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.Review", b =>
                {
                    b.HasOne("Talbat.Models.ReviewCategory", "ReviewCategory")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewCategoryId")
                        .HasConstraintName("FK_Review_ReviewCategory")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("Reviews")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Review_Store")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talbat.Models.Client", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Review_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReviewCategory");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Talbat.Models.Store", b =>
                {
                    b.HasOne("Talbat.Models.Cuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId");

                    b.HasOne("Talbat.Models.StoreType", "StoreType")
                        .WithMany("Stores")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_Store_StoreType");

                    b.Navigation("Cuisine");

                    b.Navigation("StoreType");
                });

            modelBuilder.Entity("Talbat.Models.StoreWorkingHour", b =>
                {
                    b.HasOne("Talbat.Models.Store", "Store")
                        .WithMany("StoreWorkingHours")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreWorkingHour_Store")
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Talbat.Models.SubItem", b =>
                {
                    b.HasOne("Talbat.Models.Item", "Item")
                        .WithMany("SubItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_SubItem_Item1")
                        .IsRequired();

                    b.HasOne("Talbat.Models.SubItemCategory", "SubItemCategory")
                        .WithMany("SubItems")
                        .HasForeignKey("SubItemCategoryId")
                        .HasConstraintName("FK_SubItem_SubItemCategory")
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SubItemCategory");
                });

            modelBuilder.Entity("Talbat.Models.TempPartnerRegisterationDetail", b =>
                {
                    b.HasOne("Talbat.Models.StoreType", "StoreType")
                        .WithMany("TempPartnerRegisterationDetails")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_TempPartnerRegisterationDetails_StoreType");

                    b.Navigation("StoreType");
                });

            modelBuilder.Entity("Talbat.Models.AddressType", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("Talbat.Models.City", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("Talbat.Models.Client", b =>
                {
                    b.Navigation("ClientAddresses");

                    b.Navigation("ClientDeliveryManOrders");

                    b.Navigation("ClientOffers");

                    b.Navigation("ClientSeekingJobs");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Talbat.Models.ClientAddress", b =>
                {
                    b.Navigation("ClientDeliveryManOrders");
                });

            modelBuilder.Entity("Talbat.Models.Country", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Talbat.Models.DeliveryMan", b =>
                {
                    b.Navigation("ClientDeliveryManOrders");
                });

            modelBuilder.Entity("Talbat.Models.Invoice", b =>
                {
                    b.Navigation("ClientDeliveryManOrders");
                });

            modelBuilder.Entity("Talbat.Models.Item", b =>
                {
                    b.Navigation("OfferItems");

                    b.Navigation("OrderItems");

                    b.Navigation("SubItems");
                });

            modelBuilder.Entity("Talbat.Models.Job", b =>
                {
                    b.Navigation("ClientSeekingJobs");
                });

            modelBuilder.Entity("Talbat.Models.JobCategory", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.JobLocation", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.JobPeriod", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Talbat.Models.Offer", b =>
                {
                    b.Navigation("ClientOffers");

                    b.Navigation("OfferItems");
                });

            modelBuilder.Entity("Talbat.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderReviews");
                });

            modelBuilder.Entity("Talbat.Models.OrderReview", b =>
                {
                    b.Navigation("InverseDeliveryTimeNavigation");

                    b.Navigation("InverseOrderPackagingNavigation");

                    b.Navigation("InverseQualityOffoodNavigation");

                    b.Navigation("InverseValueForMoneyNavigation");
                });

            modelBuilder.Entity("Talbat.Models.RateStatus", b =>
                {
                    b.Navigation("ItemReviews");

                    b.Navigation("OfferReviews");
                });

            modelBuilder.Entity("Talbat.Models.Region", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("Talbat.Models.ReviewCategory", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Talbat.Models.Store", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Orders");

                    b.Navigation("Partners");

                    b.Navigation("Reviews");

                    b.Navigation("StoreWorkingHours");
                });

            modelBuilder.Entity("Talbat.Models.StoreType", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("TempPartnerRegisterationDetails");
                });

            modelBuilder.Entity("Talbat.Models.SubItemCategory", b =>
                {
                    b.Navigation("SubItems");
                });
#pragma warning restore 612, 618
        }
    }
}
